{
  "fizzbuzz": {
    "variants": [
      "def fizzbuzz(n):\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)"
    ],
    "testCases": "from io import StringIO\nimport sys\n\ndef capture_output(n):\n    old_stdout = sys.stdout\n    sys.stdout = mystdout = StringIO()\n    fizzbuzz(n)\n    sys.stdout = old_stdout\n    return mystdout.getvalue().strip().split('\\n')\n\nassert capture_output(5) == ['1', '2', 'Fizz', '4', 'Buzz']\nassert capture_output(15)[-1] == 'FizzBuzz'\nassert capture_output(10)[2] == 'Fizz'\nassert 'Buzz' in capture_output(10)\nassert capture_output(3)[-1] == 'Fizz'\nassert capture_output(9)[-1] == 'Fizz'\nassert capture_output(10)[4] == 'Buzz'\nassert capture_output(30).count('FizzBuzz') == 2\nassert capture_output(1)[0] == '1'\nassert capture_output(6)[2] == 'Fizz'"
  },

  "is_palindrome_permutation": {
    "variants": [
      "def is_palindrome_permutation(s):\n    from collections import Counter\n    s = s.replace(\" \", \"\").lower()\n    counts = Counter(s)\n    odd_counts = sum(1 for count in counts.values() if count % 2 != 0)\n    return odd_counts <= 1"
    ],
    "testCases": "assert is_palindrome_permutation('Tact Coa') == True\nassert is_palindrome_permutation('aabb') == True\nassert is_palindrome_permutation('aabc') == False\nassert is_palindrome_permutation('carerac') == True\nassert is_palindrome_permutation('abcba') == True\nassert is_palindrome_permutation('abcd') == False\nassert is_palindrome_permutation('Aa') == True\nassert is_palindrome_permutation('aA ') == True\nassert is_palindrome_permutation('xyzxyzx') == True\nassert is_palindrome_permutation('xyzxyzxyz') == False"
  },
  "majority element": {
  "variants": [
    "def majority_element(nums):\n    count = 0\n    candidate = None\n    for num in nums:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate"
  ],
  "testCases": "assert majority_element([3,3,4]) == 3\nassert majority_element([2,2,1,1,1,2,2]) == 2\nassert majority_element([1]) == 1\nassert majority_element([1,1,2]) == 1\nassert majority_element([5,5,5,5,5,6,7]) == 5\nassert majority_element([6,6,6,7,7]) == 6\nassert majority_element([2,2,2,3,3]) == 2\nassert majority_element([1,2,3,2,2]) == 2\nassert majority_element([8,8,9,8,9,8,8]) == 8\nassert majority_element([10,10,10,20,30,10,10]) == 10"
},
"has unique characters": {
  "variants": [
    "def has_unique_chars(s):\n    s = s.replace(\" \", \"\").lower()\n    return len(set(s)) == len(s)"
  ],
  "testCases": "assert has_unique_chars(\"abcdefg\") is True\nassert has_unique_chars(\"a b c d e f g\") is True\nassert has_unique_chars(\"aA\") is False\nassert has_unique_chars(\"abc def ghi\") is True\nassert has_unique_chars(\"abc def ghi jkl mno pqr stu vwx yza\") is False\nassert has_unique_chars(\"1234567890\") is True\nassert has_unique_chars(\"11234567890\") is False\nassert has_unique_chars(\"\") is True\nassert has_unique_chars(\" \") is True\nassert has_unique_chars(\"!@# $%^&*()\") is True"
},
"has unique alphanum": {
  "variants": [
    "def has_unique_chars(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return len(set(s)) == len(s)"
  ],
  "testCases": "assert has_unique_chars('abc def!') is True\nassert has_unique_chars('aA1') is False\nassert has_unique_chars('abc def ghi') is True\nassert has_unique_chars('abc1231') is False\nassert has_unique_chars('1234567890') is True\nassert has_unique_chars('!@# $%^') is True\nassert has_unique_chars('AaBbCc') is False\nassert has_unique_chars('A B C ! 1 2 3') is True\nassert has_unique_chars('abc def ghi jkl mno pqr stu vwx yza') is False\nassert has_unique_chars('') is True"
},"has unique chars strict": {
  "variants": [
    "def has_unique_chars(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return len(set(s)) == len(s)"
  ],
  "testCases": "assert has_unique_chars('abc def!') is True\nassert has_unique_chars('aA1') is False\nassert has_unique_chars('abc123') is True\nassert has_unique_chars('abc1233') is False\nassert has_unique_chars('!@# $%^') is True\nassert has_unique_chars('AaBbCcDd') is False\nassert has_unique_chars('A B C D E F') is True\nassert has_unique_chars('abcdefghi1234567890') is True\nassert has_unique_chars('abc def ghi jkl mno pqr stu vwx yza') is False\nassert has_unique_chars('a b c d e f g h i j k l m n o p q r s t u v w x y z') is True\nassert has_unique_chars('aA') is False\nassert has_unique_chars('1 2 3 4 5 6 7 8 9 0') is True\nassert has_unique_chars('1 2 3 4 5 6 7 8 9 0 1') is False\nassert has_unique_chars('') is True\nassert has_unique_chars('   ') is True\nassert has_unique_chars('@@##!!') is True\nassert has_unique_chars('abc def ghi jkl mno pqr stu vwx yz') is True\nassert has_unique_chars('abc def ghi jkl mno pqr stu vwx yza') is False\nassert has_unique_chars('abcABC') is False\nassert has_unique_chars('𝔘𝔫𝔦𝔮𝔲𝔢') is True"
},
"is palindrome permutation strict": {
  "variants": [
    "def is_palindrome_permutation(s):\n    from collections import Counter\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    counts = Counter(s)\n    odd_count = sum(1 for c in counts.values() if c % 2 != 0)\n    return odd_count <= 1"
  ],
  "testCases": "assert is_palindrome_permutation('Tact Coa') is True  # 'taco cat'\nassert is_palindrome_permutation('racecar') is True\nassert is_palindrome_permutation('aabbccddeeffg') is True\nassert is_palindrome_permutation('aabbccddeeffgg') is False\nassert is_palindrome_permutation('') is True\nassert is_palindrome_permutation('!@#$') is True\nassert is_palindrome_permutation('A man, a plan, a canal, Panama') is True\nassert is_palindrome_permutation('Was it a car or a cat I saw') is True\nassert is_palindrome_permutation('No lemon, no melon') is True\nassert is_palindrome_permutation('abcdefg') is False\nassert is_palindrome_permutation('aa bb cc dd e') is True\nassert is_palindrome_permutation('aa bb cc dd ee') is True\nassert is_palindrome_permutation('abcba') is True\nassert is_palindrome_permutation('abccba') is True\nassert is_palindrome_permutation('abc') is False\nassert is_palindrome_permutation('AaBbCcDd') is True\nassert is_palindrome_permutation('abcdabcd') is True\nassert is_palindrome_permutation('abcdabcde') is False\nassert is_palindrome_permutation('x') is True\nassert is_palindrome_permutation('xyzzyx') is True"
}

}
