{
  "fizzbuzz": [
    "public static void fizzbuzz(int n) {\n    for (int i = 1; i <= n; i++) {\n        if (i % 15 == 0) System.out.println(\"FizzBuzz\");\n        else if (i % 3 == 0) System.out.println(\"Fizz\");\n        else if (i % 5 == 0) System.out.println(\"Buzz\");\n        else System.out.println(i);\n    }\n}",
    "for (int i = 1; i <= 100; i++) {\n    if (i % 3 == 0 && i % 5 == 0) {\n        System.out.println(\"FizzBuzz\");\n    } else if (i % 3 == 0) {\n        System.out.println(\"Fizz\");\n    } else if (i % 5 == 0) {\n        System.out.println(\"Buzz\");\n    } else {\n        System.out.println(i);\n    }\n}"
  ],
  "reverse a string": [
    "public String reverseString(String str) {\n    if (str == null) return \"\";\n    return new StringBuilder(str).reverse().toString();\n}",
    "public String reverse(String s) {\n    char[] chars = s.toCharArray();\n    int left = 0, right = chars.length - 1;\n    while (left < right) {\n        char temp = chars[left];\n        chars[left] = chars[right];\n        chars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(chars);\n}"
  ],
  "palindrome check": [
    "public boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n    while (left < right) {\n        if (s.charAt(left) != s.charAt(right)) return false;\n        left++;\n        right--;\n    }\n    return true;\n}"
  ],
  "two sum": [
    "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    return new int[0];\n}"
  ],
  "factorial": [
    "public int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}",
    "public int factIterative(int n) {\n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"
  ],
  "fibonacci": [
    "public int fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}",
    "public int fibonacciIterative(int n) {\n    if (n <= 1) return n;\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; i++) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}"
  ],
  "binary search": [
    "public int binarySearch(int[] arr, int target) {\n    int left = 0, right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}"
  ],
  "merge two sorted arrays": [
    "public int[] mergeSortedArrays(int[] nums1, int[] nums2) {\n    int[] merged = new int[nums1.length + nums2.length];\n    int i = 0, j = 0, k = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) merged[k++] = nums1[i++];\n        else merged[k++] = nums2[j++];\n    }\n    while (i < nums1.length) merged[k++] = nums1[i++];\n    while (j < nums2.length) merged[k++] = nums2[j++];\n    return merged;\n}"
  ]
}